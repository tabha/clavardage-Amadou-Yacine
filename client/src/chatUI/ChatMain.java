/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatUI;

import chatUtils.ChatColors;
import chatUtils.ChatIcons;
import chatUtils.Constantes;
import chatUtils.LocalData;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import networkManager.Controller;
import networkManager.Conversation;
import networkManager.Message;
import networkManager.User;

/**
 *
 * @author amadou
 */

public class ChatMain extends javax.swing.JFrame {
    private User user = null;
    private Controller controller;
    private DefaultListModel dmActiveUsers = new DefaultListModel();
    private ArrayList<Conversation> conversationsList;
    private DefaultListModel dmConv = new DefaultListModel();
    private final JFileChooser fc = new JFileChooser(System.getProperty("user.dir"));
    private final Error error = new Error(); 
    /**
     * Creates new form chatMain
     */
    
    public ChatMain(Controller c,ChatContext context) {
        initComponents();
        controller = c;
        
        this.context = context;
        this.activeNav = this.connectedUsersButton;
        this.selectedConversation = null;
        desactivateNavButton(this.messageButton);
        desactivateNavButton(this.logoutButton);
        this.sideBarUserLabel.setText(context.getUsername());
        c.setGUI(this);
        this.conversationsList = new ArrayList(this.controller.getHistory());
       
        displayHistory();
    }
    /***
     * Affiche l'historique de l'utilisateur
     */
    public void displayHistory(){
        
        dmConv.clear();
        
        for(Conversation c: this.conversationsList){
            dmConv.addElement(c);
        }
        this.conversationJList.setCellRenderer(new RendererConversation(this.controller));
        this.conversationJList.setModel(dmConv);
        
        navigateTo(this.messageButton);
        loadView(this.conversationsPanel);
    }
    /**
     * met à jour la vue contenant les utilisateurs en ligne. 
     */
    public void updateUserList(){
        if(this.controller.getConnectedUsers()==null){
            return;
        }
        dmConv.clear();
        dmActiveUsers.clear();
        for(User u: controller.getConnectedUsers()){
            dmActiveUsers.addElement(u);
        }
        this.activeUsersJList.setCellRenderer(new RendererUser(ChatColors.SELECTED_ITEM_COLOR,ChatColors.SECONDARY_COLOR));
        this.activeUsersJList.setModel(dmActiveUsers);
        
    }
    
    
    /**
     * Met à jour la vue contenant les conversations
     */
    public void updateConversationsList(){
        if(this.controller.getActiveConversations()==null) return;
        dmConv.clear();
        
        for(Conversation c: controller.getActiveConversations()){
            dmConv.addElement(c);
        }
        this.conversationJList.setCellRenderer(new RendererConversation(this.controller));
        this.conversationJList.setModel(dmConv);
    }
    
    private void clearConversationList(){
        clearUserList();
    }
    private void clearUserList(){
        dmActiveUsers.clear();
        this.conversationJList.setModel(dmActiveUsers);
    }
    public void setController(Controller c){
        this.controller = c;
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        sideBar = new javax.swing.JPanel();
        sideBarNavigation = new javax.swing.JPanel();
        logoutButton = new javax.swing.JLabel();
        connectedUsersButton = new javax.swing.JLabel();
        newMessage = new javax.swing.JLabel();
        messageButton = new javax.swing.JLabel();
        usersList = new javax.swing.JPanel();
        conversationsPanel = new javax.swing.JPanel();
        sideBarUserLabel = new javax.swing.JLabel();
        jScrollPaneActiveUsers = new javax.swing.JScrollPane();
        conversationJList = new javax.swing.JList<>();
        activeUserPanel = new javax.swing.JPanel();
        sideBarActiveUsers = new javax.swing.JLabel();
        jScrollPaneActiveUsers2 = new javax.swing.JScrollPane();
        activeUsersJList = new javax.swing.JList<>();
        messagePanel = new javax.swing.JPanel();
        conversationVue = new javax.swing.JPanel();
        conversationHeader = new javax.swing.JPanel();
        conversationIcon = new javax.swing.JLabel();
        conversationTitle = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        sendMessagePanel = new javax.swing.JPanel();
        sendMessageButton = new javax.swing.JLabel();
        attachFileButton = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        messageArea = new javax.swing.JTextArea();
        sendMessageButton1 = new javax.swing.JLabel();
        messagesPaneScrool = new javax.swing.JScrollPane();
        conversationArea = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        mainPanel.setBackground(new java.awt.Color(100, 120, 204));

        sideBar.setBackground(new java.awt.Color(86, 101, 115));

        sideBarNavigation.setBackground(new java.awt.Color(52, 73, 94));
        sideBarNavigation.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 1, new java.awt.Color(255, 204, 204)));

        logoutButton.setBackground(new java.awt.Color(5, 100, 153));
        logoutButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logoutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-logout_rounded_up.png"))); // NOI18N
        logoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutButtonMouseClicked(evt);
            }
        });

        connectedUsersButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        connectedUsersButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-user.png"))); // NOI18N
        connectedUsersButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                connectedUsersButtonMouseClicked(evt);
            }
        });

        newMessage.setBackground(new java.awt.Color(52, 73, 94));
        newMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        newMessage.setOpaque(true);
        newMessage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newMessageMouseClicked(evt);
            }
        });

        messageButton.setBackground(new java.awt.Color(5, 100, 153));
        messageButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        messageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-comments.png"))); // NOI18N
        messageButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 6, 0, 0, new java.awt.Color(255, 255, 255)));
        messageButton.setOpaque(true);
        messageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                messageButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout sideBarNavigationLayout = new javax.swing.GroupLayout(sideBarNavigation);
        sideBarNavigation.setLayout(sideBarNavigationLayout);
        sideBarNavigationLayout.setHorizontalGroup(
            sideBarNavigationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sideBarNavigationLayout.createSequentialGroup()
                .addGroup(sideBarNavigationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(newMessage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(messageButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(connectedUsersButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(logoutButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 2, Short.MAX_VALUE))
        );
        sideBarNavigationLayout.setVerticalGroup(
            sideBarNavigationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sideBarNavigationLayout.createSequentialGroup()
                .addGap(185, 185, 185)
                .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(connectedUsersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(messageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(newMessage)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        usersList.setBackground(new java.awt.Color(46, 64, 83));

        conversationsPanel.setBackground(new java.awt.Color(46, 64, 83));

        sideBarUserLabel.setBackground(new java.awt.Color(46, 64, 83));
        sideBarUserLabel.setFont(new java.awt.Font(".SF NS Text", 1, 14)); // NOI18N
        sideBarUserLabel.setForeground(new java.awt.Color(51, 255, 51));
        sideBarUserLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sideBarUserLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-user-color-s.png"))); // NOI18N
        sideBarUserLabel.setText("Me");
        sideBarUserLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 204, 204)));
        sideBarUserLabel.setIconTextGap(10);

        jScrollPaneActiveUsers.setBackground(new java.awt.Color(46, 64, 83));
        jScrollPaneActiveUsers.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 0, new java.awt.Color(0, 0, 0)));

        conversationJList.setBackground(new java.awt.Color(46, 64, 83));
        conversationJList.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 0, new java.awt.Color(0, 0, 0)));
        conversationJList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                conversationJListMouseClicked(evt);
            }
        });
        jScrollPaneActiveUsers.setViewportView(conversationJList);

        javax.swing.GroupLayout conversationsPanelLayout = new javax.swing.GroupLayout(conversationsPanel);
        conversationsPanel.setLayout(conversationsPanelLayout);
        conversationsPanelLayout.setHorizontalGroup(
            conversationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sideBarUserLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
            .addComponent(jScrollPaneActiveUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        conversationsPanelLayout.setVerticalGroup(
            conversationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conversationsPanelLayout.createSequentialGroup()
                .addComponent(sideBarUserLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPaneActiveUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        activeUserPanel.setBackground(new java.awt.Color(46, 64, 83));

        sideBarActiveUsers.setBackground(new java.awt.Color(46, 64, 83));
        sideBarActiveUsers.setFont(new java.awt.Font(".SF NS Text", 1, 14)); // NOI18N
        sideBarActiveUsers.setForeground(new java.awt.Color(102, 255, 51));
        sideBarActiveUsers.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sideBarActiveUsers.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/group-icons-label.png"))); // NOI18N
        sideBarActiveUsers.setText("Online");
        sideBarActiveUsers.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 204, 204)));
        sideBarActiveUsers.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        sideBarActiveUsers.setIconTextGap(15);
        sideBarActiveUsers.setName(""); // NOI18N

        jScrollPaneActiveUsers2.setBackground(new java.awt.Color(46, 64, 83));
        jScrollPaneActiveUsers2.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 0, new java.awt.Color(0, 0, 0)));

        activeUsersJList.setBackground(new java.awt.Color(46, 64, 83));
        activeUsersJList.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 0, new java.awt.Color(0, 0, 0)));
        activeUsersJList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                activeUsersJListMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                activeUsersJListMouseEntered(evt);
            }
        });
        jScrollPaneActiveUsers2.setViewportView(activeUsersJList);

        javax.swing.GroupLayout activeUserPanelLayout = new javax.swing.GroupLayout(activeUserPanel);
        activeUserPanel.setLayout(activeUserPanelLayout);
        activeUserPanelLayout.setHorizontalGroup(
            activeUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sideBarActiveUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(activeUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPaneActiveUsers2, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE))
        );
        activeUserPanelLayout.setVerticalGroup(
            activeUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(activeUserPanelLayout.createSequentialGroup()
                .addComponent(sideBarActiveUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(511, Short.MAX_VALUE))
            .addGroup(activeUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, activeUserPanelLayout.createSequentialGroup()
                    .addGap(0, 66, Short.MAX_VALUE)
                    .addComponent(jScrollPaneActiveUsers2, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout usersListLayout = new javax.swing.GroupLayout(usersList);
        usersList.setLayout(usersListLayout);
        usersListLayout.setHorizontalGroup(
            usersListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 214, Short.MAX_VALUE)
            .addGroup(usersListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(usersListLayout.createSequentialGroup()
                    .addComponent(conversationsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 17, Short.MAX_VALUE)))
            .addGroup(usersListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(usersListLayout.createSequentialGroup()
                    .addComponent(activeUserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 18, Short.MAX_VALUE)))
        );
        usersListLayout.setVerticalGroup(
            usersListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(usersListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(usersListLayout.createSequentialGroup()
                    .addComponent(conversationsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(usersListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(usersListLayout.createSequentialGroup()
                    .addComponent(activeUserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout sideBarLayout = new javax.swing.GroupLayout(sideBar);
        sideBar.setLayout(sideBarLayout);
        sideBarLayout.setHorizontalGroup(
            sideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sideBarLayout.createSequentialGroup()
                .addComponent(sideBarNavigation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(usersList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );
        sideBarLayout.setVerticalGroup(
            sideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sideBarNavigation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(usersList, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        messagePanel.setBackground(new java.awt.Color(200, 203, 217));
        messagePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        conversationVue.setBackground(new java.awt.Color(100, 120, 204));

        conversationHeader.setBackground(new java.awt.Color(78, 81, 86));
        conversationHeader.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 0, new java.awt.Color(255, 204, 255)));

        conversationIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/conversation-icon-labelheader.png"))); // NOI18N

        conversationTitle.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        conversationTitle.setForeground(new java.awt.Color(255, 255, 255));
        conversationTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        conversationTitle.setText("Ahmad");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-filled_circle.png"))); // NOI18N

        javax.swing.GroupLayout conversationHeaderLayout = new javax.swing.GroupLayout(conversationHeader);
        conversationHeader.setLayout(conversationHeaderLayout);
        conversationHeaderLayout.setHorizontalGroup(
            conversationHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conversationHeaderLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(conversationIcon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(conversationTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(144, 144, 144))
        );
        conversationHeaderLayout.setVerticalGroup(
            conversationHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, conversationHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(conversationHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(conversationHeaderLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(conversationIcon, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(conversationTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, conversationHeaderLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        sendMessagePanel.setBackground(new java.awt.Color(230, 230, 230));

        sendMessageButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sendMessageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-sent.png"))); // NOI18N
        sendMessageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendMessageButtonMouseClicked(evt);
            }
        });

        attachFileButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        attachFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-attach.png"))); // NOI18N
        attachFileButton.setToolTipText("");
        attachFileButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                attachFileButtonMouseClicked(evt);
            }
        });

        jScrollPane3.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 0, new java.awt.Color(0, 0, 0)));
        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        messageArea.setBackground(new java.awt.Color(204, 204, 204));
        messageArea.setColumns(20);
        messageArea.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        messageArea.setForeground(new java.awt.Color(51, 51, 51));
        messageArea.setLineWrap(true);
        messageArea.setRows(5);
        messageArea.setToolTipText("");
        jScrollPane3.setViewportView(messageArea);

        sendMessageButton1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sendMessageButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-sent.png"))); // NOI18N
        sendMessageButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendMessageButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout sendMessagePanelLayout = new javax.swing.GroupLayout(sendMessagePanel);
        sendMessagePanel.setLayout(sendMessagePanelLayout);
        sendMessagePanelLayout.setHorizontalGroup(
            sendMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sendMessagePanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(attachFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sendMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sendMessagePanelLayout.createSequentialGroup()
                        .addComponent(sendMessageButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(sendMessageButton, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                .addContainerGap())
        );
        sendMessagePanelLayout.setVerticalGroup(
            sendMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sendMessagePanelLayout.createSequentialGroup()
                .addGroup(sendMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sendMessagePanelLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(attachFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(sendMessagePanelLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(sendMessageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sendMessageButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        messagesPaneScrool.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 0, new java.awt.Color(0, 0, 0)));
        messagesPaneScrool.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        messagesPaneScrool.setEnabled(false);

        conversationArea.setEditable(false);
        messagesPaneScrool.setViewportView(conversationArea);

        javax.swing.GroupLayout conversationVueLayout = new javax.swing.GroupLayout(conversationVue);
        conversationVue.setLayout(conversationVueLayout);
        conversationVueLayout.setHorizontalGroup(
            conversationVueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conversationVueLayout.createSequentialGroup()
                .addGroup(conversationVueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(conversationHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(conversationVueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(sendMessagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(messagesPaneScrool)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        conversationVueLayout.setVerticalGroup(
            conversationVueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, conversationVueLayout.createSequentialGroup()
                .addComponent(conversationHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(messagesPaneScrool, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(sendMessagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        messagePanel.add(conversationVue, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 450, 580));

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(sideBar, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(messagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sideBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(messagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void desactivateNavButton(javax.swing.JLabel button){
        button.setBackground(Color.BLACK);
        button.setOpaque(false);
        button.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 0,Color.BLACK));
    }
    private void navigateTo(javax.swing.JLabel to){
        desactivateNavButton(this.activeNav);
        to.setBackground(new java.awt.Color(5, 100, 153));
        to.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 6, 0, 0, new java.awt.Color(255, 255, 255)));
        to.setOpaque(true);
        this.activeNav=to;
    }
    
    private void connectedUsersButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_connectedUsersButtonMouseClicked
        /*try {*/
            // TODO add your handling code here:
        navigateTo(this.connectedUsersButton);
        // change the vue to connected Users
        desactivateNavButton(this.messageButton);
        desactivateNavButton(this.logoutButton);
        this.updateUserList();
        loadView(this.activeUserPanel);
        
    }//GEN-LAST:event_connectedUsersButtonMouseClicked
    
    private void loadView(JPanel view){
       this.usersList.removeAll();
       this.usersList.repaint();
       this.usersList.revalidate();
       if(view==null){
           System.out.println("Error ");
       }
       this.usersList.add(view);
       this.usersList.repaint();
       this.usersList.revalidate();

    }
    private void logoutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutButtonMouseClicked
        // TODO add your handling code here:
        navigateTo(this.logoutButton);
        // call logout procedure
        StringBuilder error = new StringBuilder();
        try {
            controller.logout(this.context.getUsername(),this.context.getToken(),error);
            this.setVisible(false);
            context.clearContext();
            new LandingPage(context).setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(ChatMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_logoutButtonMouseClicked
    
    private void messageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_messageButtonMouseClicked
        // TODO add your handling code here:
        navigateTo(this.messageButton);
        
        this.updateConversationsList();
        
        loadView(this.conversationsPanel);
    }//GEN-LAST:event_messageButtonMouseClicked
    
    
    
    private void conversationJListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_conversationJListMouseClicked
        // TODO add your handling code here:
        Conversation value = this.conversationJList.getSelectedValue();
        
        this.selectedConversation = value;
        displayConversation(value);
        
    }//GEN-LAST:event_conversationJListMouseClicked
    
    public void loadViewConversation(){
        this.updateConversationsList();
        this.navigateTo(this.messageButton);
        
        this.loadView(this.conversationsPanel);
    }
    
    public void displayConversation(Conversation c){
        this.conversationJList.setSelectedValue(c, true);
        String title =c.getTitle();
        this.conversationTitle.setText(title);
        this.conversationArea.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES,Boolean.TRUE);
        this.conversationArea.setEditable(false);
        this.conversationArea.setContentType("text/html");
        this.conversationArea.setVisible(true);
        
        ArrayList<Message> unreadMessages = this.controller.getUndreadMessages(c);
        for(Message m:unreadMessages){
            c.getMessages().add(m);
        }
            
        String history = "<style type='text/css'>"
                        + ".message-sent{margin:3px 5px 3px 50px;padding:0 5px 5px 5px;background:#85C1E9;color:white;font-size:14pt;}"
                        + ".message-received{margin:3px 50px 3px 5px;padding:0 5px 5px 5px;background:#eeeeee;color:black;font-size:14pt;}"
                        + ".date-sent{font-size:11pt;color:white;}"
                        + ".date-received{font-size:11pt;color:black;}"
                        + ".user-sent{font-size:11pt;color:#888888;margin:3px 0 0 55px;}"
                        + ".user-received{font-size:11pt;color:#888888;margin:3px 0 0 10px;}"
                        + "</style>";
			
        // Utilise pour ne pas repeter le nom de l'utilisateur si plusieurs messages consecutifs
        User prevSender = null;
        
        if(c.getMessages().isEmpty()){
            history += "<div class='message-received'>You can chat with "+title+" now.</div>";
        }
        for(Message m : c.getMessages()) {
                String username, date, content;
                content = m.getMessage();

                // Format du contenu
                // Si image
                if(m.getTypeMsg().equals(Constantes.IMG)) {
                    String fileName =content;
                    String path="";
                    if(m.getSender().equals(this.context.getAuthUser())){
                        path = LocalData.getSentFile(fileName);
                    }else{
                        path = LocalData.getReceivedFile(fileName);
                    }
                    File file = new File(path);
                    // On l'affiche si elle existe encore sur le disque
                    if(file.exists()) {
                        content = "<img src=file:" + path + "' width='200' height='200' alt='image' />";
                    }
                    else {
                        if(m.getSender().equals(controller.getUser()))
                                content = "Vous avez envoye une image :<br/>";
                        else
                                content = "Vous avez recu une image :<br/>";

                        content += "<strong>" + file.getName() + "</strong>";
                    }

                }

                // Si fichier
                else if(m.getTypeMsg().equals(Constantes.FILE)) {
                    File file = new File(content);

                    if(m.getSender().equals(this.context.getAuthUser()))
                        content = "Vous avez envoye un fichier :<br/>";
                    else
                        content = "Vous avez recu un fichier :<br/>";

                    content += "<strong>" + file.getName() + "</strong>";
                 }

                // Format de la date
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm");
                date = dateFormat.format(m.getDateEnvoi());

                // Message envoye par moi
                if(m.getSender().equals(controller.getUser())) {
                    username = "<div class='user-sent'>Moi</div>";
                    date = "<span class='date-sent'>" + date + "</span>";
                    content = "<div class='message-sent'>" + date + "<br>" + content + "</div>";
                }
                // Message envoye par l'autre utilisateur
                else {
                    username = "<div class='user-received'>" + m.getSender().getUserName() + "</div>";
                    date = "<span class='date-received'>" + date + "</span>";
                    content = "<div class='message-received'>" + date + "<br>" + content + "</div>";
                }

                if(m.getSender().equals(prevSender))
                    history += content;
                else
                    history += username + content;

                prevSender = m.getSender();
        }
        
        // Affichage des messages
        this.conversationArea.setText(history);

        // Scroll a la fin des messages
        conversationArea.setCaretPosition(conversationArea.getDocument().getLength());		
}   
    
    private void activeUsersJListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_activeUsersJListMouseClicked
        // TODO add your handling code here:
        User selectedUser = this.activeUsersJList.getSelectedValue();
        Conversation c = getConversationWithUser(selectedUser);
        if(c==null){
            c = new Conversation();
            c.setTitle(Constantes.UNTITLED);
            c.setCreatedat(new Date());
            c.setUser(this.context.getAuthUser());
            c.setIdConv("null");
            c.setTypeconv(Constantes.SINGLE);
            c.getParticipants().add(selectedUser);
            this.conversationsList.add(c);
            
        }else if(!c.getMessages().isEmpty()){
            this.navigateTo(this.messageButton);
            this.updateConversationsList();
            loadView(this.conversationsPanel);
            
        }
        this.selectedConversation = c;
        displayConversation(c);
    }//GEN-LAST:event_activeUsersJListMouseClicked

    private Conversation getSelectedConversation(){
        return this.selectedConversation;
    }
    void showError(String message) {
        error.setErrorMessage(message);
        error.setVisible(true);
    }
    
    private boolean isImage(String filePath){
        String[] tokens = filePath.split("/");
        String fileName =tokens[tokens.length-1];
        return fileName.endsWith(".png") || fileName.endsWith(".jpeg") || fileName.endsWith(".gif")|| fileName.endsWith(".jpg");
    }
    private void attachFileButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attachFileButtonMouseClicked
        // TODO add your handling code here:
        Conversation c = getSelectedConversation();
        c = this.controller.getConversation(c.getIdConv());
        fc.setDialogTitle("Selectionner un fichier à envoyer");
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setMultiSelectionEnabled(false);
        int returnValue = fc.showDialog(null, "Send");
        if(returnValue==JFileChooser.APPROVE_OPTION){
            //
            File selectedFile = fc.getSelectedFile();
            
            Message msg = new Message();
            String type = isImage(selectedFile.toString()) ? Constantes.IMG: Constantes.FILE;
            msg.setTypeMsg(type);
            msg.setMessage(selectedFile.getAbsolutePath());
            msg.setConversation(c);
            msg.setSender(this.context.getAuthUser());
            msg.setDateEnvoi(new Date());
            
            //this.displayConversation(c);
            try {
                controller.sendMessage(c, msg);
            } catch (IOException ex) {
                Logger.getLogger(ChatMain.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(ChatMain.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
        }
    }//GEN-LAST:event_attachFileButtonMouseClicked
    
    private Conversation getConversationWithUser(User u){
        for(Conversation c: this.conversationsList){
            if(c.getParticipants().contains(u)) return c;
        }
        return null;
    }
    
    private void sendMessageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendMessageButtonMouseClicked
        if(this.messageArea.getText().trim().isEmpty())
           return; 
        
        Conversation c = this.getSelectedConversation();
        if(c==null){
            return;
        }
        String message = this.messageArea.getText().trim();
        Message msg = new Message();
        msg.setTypeMsg(Constantes.TEXT);
        msg.setMessage(message);
        msg.setSender(this.context.getAuthUser());
        msg.setDateEnvoi(new Date());
        
        //c.getMessages().add(msg);
        
        //this.displayConversation(c);
        
        try {
            this.controller.sendMessage(c, msg);
        } catch (IOException ex) {
            this.showError("Impossible d'envoyer le message");
        } catch (ParseException ex) {
            Logger.getLogger(ChatMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.messageArea.setText(null);
    }//GEN-LAST:event_sendMessageButtonMouseClicked

    private void sendMessageButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendMessageButton1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_sendMessageButton1MouseClicked

    private void newMessageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newMessageMouseClicked
        // TODO add your handling code here:
    
        EditGroup  edit = new EditGroup(this.controller,this,this.error);
        edit.setVisible(true);
       
    }//GEN-LAST:event_newMessageMouseClicked

    private void activeUsersJListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_activeUsersJListMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_activeUsersJListMouseEntered
    
    
    private javax.swing.JLabel activeNav;
    
    private ChatContext context;
    private Conversation selectedConversation;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel activeUserPanel;
    private javax.swing.JList<User> activeUsersJList;
    private javax.swing.JLabel attachFileButton;
    private javax.swing.JLabel connectedUsersButton;
    private javax.swing.JEditorPane conversationArea;
    private javax.swing.JPanel conversationHeader;
    private javax.swing.JLabel conversationIcon;
    private javax.swing.JList<Conversation> conversationJList;
    private javax.swing.JLabel conversationTitle;
    private javax.swing.JPanel conversationVue;
    private javax.swing.JPanel conversationsPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPaneActiveUsers;
    private javax.swing.JScrollPane jScrollPaneActiveUsers2;
    private javax.swing.JLabel logoutButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextArea messageArea;
    private javax.swing.JLabel messageButton;
    private javax.swing.JPanel messagePanel;
    private javax.swing.JScrollPane messagesPaneScrool;
    private javax.swing.JLabel newMessage;
    private javax.swing.JLabel sendMessageButton;
    private javax.swing.JLabel sendMessageButton1;
    private javax.swing.JPanel sendMessagePanel;
    private javax.swing.JPanel sideBar;
    private javax.swing.JLabel sideBarActiveUsers;
    private javax.swing.JPanel sideBarNavigation;
    private javax.swing.JLabel sideBarUserLabel;
    private javax.swing.JPanel usersList;
    // End of variables declaration//GEN-END:variables

    public boolean isSelectedConversation(Conversation c) {
        Conversation conv =this.getSelectedConversation();
        if(conv==null) return false;
        return conv.getIdConv().equals(c.getIdConv());   
    }

    public void updateConversationView(Conversation c) {
        System.out.println("Conversation "+c.getTitle());
        for(Message m:c.getMessages()){
            System.out.println("message ="+m.getMessage() +",  sender="+m.getSender().getUserName());
        }
    }

    public void addSentMessage(Message msg) {
        for(Conversation c:this.conversationsList){
            if(c.equals(msg.getConversation())){
                c.getMessages().add(msg);
                break;
            }
        }
    }


    
}
