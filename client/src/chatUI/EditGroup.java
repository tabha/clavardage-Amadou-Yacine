/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatUI;

import chatUtils.ChatColors;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ListSelectionModel;
import networkManager.Controller;
import networkManager.Conversation;
import networkManager.User;

/**
 *
 * @author amadou
 */
public final class EditGroup extends javax.swing.JFrame {
     private DefaultListModel dmActiveUsers = new DefaultListModel();
     private Controller controller;
     private ChatMain gui;
     
    /**
     * Creates new form EditGroup
     */
    public EditGroup(Controller c,ChatMain gui,Error err) {
        initComponents();
        this.controller = c;
        this.gui = gui;
        this.selectedIndices = new int[c.getConnectedUsers().size()];
        this.error = err;
        this.groupName.setText(selectedUser.getUserName());
        Arrays.fill(this.selectedIndices, c.getConnectedUsers().size()+1);
        updateUserList();
    }
    
    public void updateUserList(){
        if(this.controller.getConnectedUsers()==null){
            return;
        }
        dmActiveUsers.clear();
        User selectedU = null;
        ArrayList<User> users = controller.getConnectedUsers();
        for(User u: users){
            if(u.equals(this.selectedUser))
                selectedU=u;
            dmActiveUsers.addElement(u);
        }
        
        this.activeUsersList .setCellRenderer(new RendererUser(ChatColors.SELECTED_ITEM_COLOR,ChatColors.SELECTED_ITEM_TEXT));
        this.activeUsersList.setModel(dmActiveUsers);
        this.activeUsersList.setSelectedValue(selectedU,true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        groupName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        typeComboxGroup = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        activeUsersList = new javax.swing.JList<>();
        cancelButton = new javax.swing.JButton();
        createButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(239, 239, 236));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        groupName.setBackground(new java.awt.Color(239, 239, 236));
        groupName.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        groupName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        groupName.setText("Group Name");
        groupName.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(8, 100, 153)));
        groupName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                groupNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                groupNameFocusLost(evt);
            }
        });
        groupName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupNameActionPerformed(evt);
            }
        });
        groupName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                groupNameKeyPressed(evt);
            }
        });
        jPanel1.add(groupName, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 77, 258, 37));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(8, 100, 153));
        jLabel1.setText("start conversation");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 30, -1, -1));

        typeComboxGroup.setBackground(new java.awt.Color(239, 239, 236));
        typeComboxGroup.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "single", "group" }));
        typeComboxGroup.setBorder(null);
        typeComboxGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboxGroupActionPerformed(evt);
            }
        });
        jPanel1.add(typeComboxGroup, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 132, 258, 32));

        jScrollPane1.setBorder(null);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        activeUsersList.setBackground(new java.awt.Color(239, 239, 236));
        activeUsersList.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(8, 100, 153)));
        activeUsersList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                activeUsersListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(activeUsersList);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 182, 260, 107));

        cancelButton.setBackground(new java.awt.Color(244, 67, 54));
        cancelButton.setForeground(new java.awt.Color(255, 255, 255));
        cancelButton.setText("Cancel");
        cancelButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 4, 0, new java.awt.Color(255, 153, 153)));
        cancelButton.setOpaque(true);
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelButtonMouseClicked(evt);
            }
        });
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        jPanel1.add(cancelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 310, 90, 40));

        createButton.setBackground(new java.awt.Color(76, 175, 80));
        createButton.setForeground(new java.awt.Color(255, 255, 255));
        createButton.setText("Create");
        createButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 4, 0, new java.awt.Color(255, 153, 153)));
        createButton.setOpaque(true);
        createButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createButtonMouseClicked(evt);
            }
        });
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });
        jPanel1.add(createButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 310, 90, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void groupNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_groupNameFocusGained
        String username = groupName.getText();
        if(username.equals("Group Name")){
            groupName.setCaretPosition(0);
        }
    }//GEN-LAST:event_groupNameFocusGained

    private void groupNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_groupNameFocusLost
        String username = groupName.getText();
        
        if(username.equals("")){
            groupName.setForeground(new java.awt.Color(86, 86, 86));
            groupName.setCaretPosition(0);
            groupName.setText("Group Name");
        }
    }//GEN-LAST:event_groupNameFocusLost

    private void groupNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_groupNameKeyPressed
        String username = groupName.getText();
        
        if(username.equals("Group Name")){
            groupName.setForeground(new java.awt.Color(0, 0, 0));
            groupName.setText(null);
            groupName.setCaretPosition(0);
        }
    }//GEN-LAST:event_groupNameKeyPressed
    
    public Conversation getConversation(){
        if(this.groupName.getText().trim().isEmpty() || this.activeUsersList.isSelectionEmpty()){
            return null;
        }
        
        Conversation c = new Conversation();
        c.setParticipants(getSelectedUsers());
        c.setTitle(this.groupName.getText().trim());
        c.setTypeconv((String)this.typeComboxGroup.getSelectedItem());
        return c;
    }
    
    public ArrayList<User> getSelectedUsers(){
        return new ArrayList<User>(this.activeUsersList.getSelectedValuesList());
    }
    private void typeComboxGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboxGroupActionPerformed
        // TODO add your handling code here:
        String type =(String) this.typeComboxGroup.getSelectedItem();
        if(type.equals("single")){
            this.activeUsersList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        }else{
            this.activeUsersList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        }
    }//GEN-LAST:event_typeComboxGroupActionPerformed

    private void cancelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseClicked

    }//GEN-LAST:event_cancelButtonMouseClicked
    
    
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed

        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void activeUsersListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_activeUsersListMouseClicked
        // TODO add your handling code here:
        this.valid = ! this.groupName.getText().equals("Group Name") || ! this.groupName.getText().trim().isEmpty();
        String type =(String) this.typeComboxGroup.getSelectedItem();
        int newSelection = this.activeUsersList.getSelectedIndex();
        if(type.equals("group")){
            
            if(this.selectedIndices[newSelection] >= this.selectedIndices.length){ // not selected add in selection
                this.selectedIndices[newSelection] = newSelection;
            }else{
                this.selectedIndices[newSelection] = this.selectedIndices.length+1;
            }
            this.activeUsersList.setSelectedIndices(this.selectedIndices);
            this.activeUsersList.setSelectedIndex(newSelection);
        }
        this.valid &= ! this.activeUsersList.isSelectionEmpty();
    }//GEN-LAST:event_activeUsersListMouseClicked

    private void groupNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groupNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_groupNameActionPerformed

    private void createButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_createButtonMouseClicked

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        // TODO add your handling code here
        
        Conversation c = this.getConversation();
        if(c==null){
            String message = this.groupName.getText().equals("Group Name") || this.groupName.getText().trim().isEmpty()? "Enter a group Name ":null;
            message = message ==null ? (this.activeUsersList.isSelectionEmpty() ? "Add one or more Participants ":null) : message; 
            
            if(message!=null){
               gui.showError(message);
            }
            
            return;
        }
        this.setVisible(false);
        try {
            c = this.controller.startNewConversation(c.getTypeconv(),c.getTitle(),c.getParticipants());
            
            gui.updateConversationsList();
            gui.displayConversation(c);
            gui.loadViewConversation();
        } catch (IOException ex) {

            Logger.getLogger(EditGroup.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_createButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    private int[] selectedIndices;
    private Error error;
    private boolean valid=false;
    private User selectedUser=null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<User> activeUsersList;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton createButton;
    private javax.swing.JTextField groupName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> typeComboxGroup;
    // End of variables declaration//GEN-END:variables
}
